---
alwaysApply: true
---
# Minoc プロジェクト構造ガイド

Minoc（みのく）は、LLMがPC操作を通じてプログラミングや執筆を行い、ツール呼び出し履歴の収集と分析を行うCLIアプリケーションです。

## アーキテクチャ概要

Minocは以下のモジュール構造を採用しています：

### 主要ディレクトリ構造

```
Minoc/
├── core/              # 基幹機能
│   ├── llm/          # LLM統合（OpenAI Client、System Prompt）
│   ├── tools/        # ツール定義・実行エンジン
│   ├── history/      # 履歴管理システム
│   ├── config/       # 設定管理（TOML形式）
│   └── permission/   # 権限・セキュリティ管理
├── cli/              # CLIインターフェース
│   ├── commands/     # CLIコマンド実装
│   ├── ui/          # ユーザーインターフェース（承認、進捗表示）
│   └── prompt/       # プロンプト処理
├── interfaces/       # 共通インターフェース定義
└── [main.ts](mdc:main.ts)           # アプリケーションエントリーポイント
```

### 重要な設計原則

1. **セキュリティファースト**: 全てのツール実行は権限チェックと承認システムを通過
2. **履歴管理**: 全ての操作がJSON形式で記録・保存される
3. **設定のTOML化**: 従来のJSON設定をより人間が読みやすいTOML形式に移行
4. **モジュラー設計**: 各機能は独立したモジュールとして実装

### エントリーポイント

メインアプリケーションは[main.ts](mdc:main.ts)で定義される`MinocApp`クラスです。このクラスは：

- 設定管理（[ConfigManager](mdc:core/config/manager.ts)）
- ツール実行（[ToolExecutor](mdc:core/tools/tool_executor.ts)）
- 履歴記録（[HistoryRecorder](mdc:core/history/history_recorder.ts)）
- LLM統合（[OpenAIClient](mdc:core/llm/openai_client.ts)）

これらの機能を統合して動作します。

### 設定ファイル管理

設定は実行ファイルと同階層の`.minoc`ディレクトリに保存されます：

```
.minoc/
├── config/
│   ├── settings.toml      # 基本設定
│   ├── permissions.toml   # 権限設定  
│   ├── models.toml        # モデル設定
│   ├── security.toml      # セキュリティ設定
│   └── debug.toml         # デバッグ設定
├── history/sessions/      # セッション履歴（JSON）
└── logs/                  # ログファイル
```

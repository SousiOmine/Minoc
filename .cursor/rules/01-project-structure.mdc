---
alwaysApply: true
---
# Minoc プロジェクト構造ガイド

Minoc（みのく）は、LLMがPC操作を通じてプログラミングや執筆を行い、ツール呼び出し履歴の収集と分析を行うCLIアプリケーションです。

## アーキテクチャ概要

Minocは以下のモジュラー構造を採用しています：

### 主要ディレクトリ構造

```
Minoc/
├── cli/
│   ├── commands/
│   │   └── command_handler.ts
│   ├── prompt/
│   │   └── input_handler.ts
│   └── ui/
│       ├── approval.ts
│       └── progress.ts
├── core/
│   ├── chat/
│   │   └── chat_engine.ts
│   ├── config/
│   │   ├── manager.ts
│   │   └── types.ts
│   ├── history/
│   │   └── history_recorder.ts
│   ├── llm/
│   │   ├── openai_client.ts
│   │   └── system_prompt.ts
│   ├── permission/
│   │   ├── permission_manager.ts
│   │   └── security_manager.ts
│   ├── session/
│   │   └── session_manager.ts
│   └── tools/
│       ├── base_tool.ts
│       ├── command_tool.ts
│       ├── file_tools.ts
│       ├── response_tool.ts
│       └── tool_executor.ts
├── interfaces/
│   ├── agent.ts
│   ├── history.ts
│   └── tool.ts
├── deno.json
├── LICENSE
├── main.ts
├── main_test.ts
├── models.example.toml
├── README.md
├── requirements.md
└── settings.example.toml
```

## 重要な設計原則

1. **セキュリティファースト**: 全てのツール実行は権限チェックと承認を通過
2. **履歴管理**: 全ての操作がJSON形式で記録・保存
3. **TOML設定**: 設定は`.minoc`ディレクトリ内のTOMLファイルで管理
4. **モジュラー設計**: 各機能は独立モジュールで実装

## エントリーポイント

メインアプリケーションは[`main.ts`](mdc:main.ts)で定義される`MinocApp`クラスで、以下のコンポーネントを統合します：

- [ConfigManager](mdc:core/config/manager.ts)
- [ToolExecutor](mdc:core/tools/tool_executor.ts)
- [HistoryRecorder](mdc:core/history/history_recorder.ts)
- [OpenAIClient](mdc:core/llm/openai_client.ts)

設定は実行ファイルと同階層の`.minoc`ディレクトリに保存されます：

```
.minoc/
├── config/
│   ├── settings.toml      # 基本設定
│   ├── permissions.toml   # 権限設定  
│   ├── models.toml        # モデル設定
│   ├── security.toml      # セキュリティ設定
│   └── debug.toml         # デバッグ設定
├── history/sessions/      # セッション履歴（JSON）
└── logs/                  # ログファイル
```

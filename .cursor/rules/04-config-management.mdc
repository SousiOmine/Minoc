---
alwaysApply: false
---
# 設定管理ガイドライン

Minocでは設定ファイルをTOML形式で管理し、[ConfigManager](mdc:core/config/manager.ts)クラスで一元管理しています。

## 設定ファイルの場所

設定は実行ファイルと同階層の`.minoc/config/`ディレクトリに保存されます：

```
.minoc/config/
├── settings.toml      # アプリケーション基本設定
├── permissions.toml   # 権限・セキュリティ設定
├── models.toml        # LLMモデル設定
├── security.toml      # セキュリティポリシー
└── debug.toml         # デバッグ設定
```

## 設定型定義

[core/config/types.ts](mdc:core/config/types.ts)で定義されたインターフェースに従います：

### AppSettings
```typescript
export interface AppSettings {
  defaultModel: string;
  debug: boolean;
  showProgress: boolean;
  progressThreshold: number;
  logLevel: 'DEBUG' | 'INFO' | 'WARN' | 'ERROR';
  maxHistoryCount: number;
}
```

### ModelConfig
```typescript
export interface ModelConfig {
  baseUrl?: string;
  apiKey?: string;
  temperature?: number;
  top_p?: number;
  top_k?: number;
  max_tokens?: number;
  customInstructions?: string;
}
```

## TOML記述例

### settings.toml
```toml
# アプリケーション基本設定
defaultModel = "gpt-4"
debug = false
showProgress = true
progressThreshold = 5
logLevel = "INFO"
maxHistoryCount = 100
```

### models.toml
```toml
[gpt-4]
baseUrl = "https://api.openai.com/v1"
apiKey = "your-api-key-here"
temperature = 0.7
top_p = 1.0
max_tokens = 4096
customInstructions = "あなたは親切で知識豊富なアシスタントです。"

[claude-3-5-sonnet-20241022]
baseUrl = "https://api.anthropic.com/v1"
apiKey = "your-anthropic-api-key-here"
temperature = 0.6
top_p = 0.95
top_k = 40
max_tokens = 4096
customInstructions = "思慮深く論理的な回答を提供してください。"
```

## ConfigManagerの使用パターン

### 設定読み込み
```typescript
const configManager = new ConfigManager();
await configManager.initializeConfigDirectory();

const settings = await configManager.getAppSettings();
const modelConfig = await configManager.getModelConfig('gpt-4');
```

### 設定保存
```typescript
await configManager.saveAppSettings({
  defaultModel: 'gpt-4',
  debug: true,
  // ...
});
```

## JSON から TOML への移行

### 自動移行プロセス
ConfigManagerは自動的にJSONファイルをTOML形式に移行します：

1. JSONファイルが存在しTOMLファイルが存在しない場合
2. JSONの内容をTOMLに変換
3. 元のJSONファイルを`.backup`拡張子付きでバックアップ

### 手動クリーンアップ
```bash
# バックアップファイルの削除
deno task dev --cleanup-json
```

## 設定ファイルのベストプラクティス

### TOML記述規約
- セクションは`[section_name]`で定義
- 文字列は引用符で囲む
- ブール値は`true`/`false`
- 数値は引用符なし
- コメントは`#`で開始

### 機密情報の取り扱い
- APIキーなどの機密情報も設定ファイルに保存
- `.minoc`ディレクトリは`.gitignore`に追加済み
- 本番環境では適切なファイル権限を設定

### 設定の階層化
```toml
# グローバル設定
debug = false

# プロバイダー別設定
[providers.openai]
baseUrl = "https://api.openai.com/v1"
retryCount = 3

[providers.anthropic]
baseUrl = "https://api.anthropic.com/v1" 
retryCount = 5
```

## 設定バリデーション

### 型安全な設定読み込み
```typescript
private async loadConfig<T>(filename: string, defaultConfig: T): Promise<T> {
  // TOML解析とデフォルト値のマージ
  const parsed = parseToml(content) as T;
  return { ...defaultConfig, ...parsed };
}
```

### 設定例ファイル
[settings.example.toml](mdc:settings.example.toml)と[models.example.toml](mdc:models.example.toml)を参考にしてください。

---

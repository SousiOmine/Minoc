# TypeScript & Deno コーディング規約

このプロジェクトはDeno 2.4.0以上とTypeScriptを使用しています。

## Deno設定

[deno.json](mdc:deno.json)で定義された設定に従ってください：

### TypeScriptコンパイラオプション
- `strict: true` - 厳格な型チェック
- `noImplicitAny: true` - 暗黙的なany型を禁止
- `noImplicitReturns: true` - 戻り値のない関数を禁止
- `noFallthroughCasesInSwitch: true` - switch文のfall-throughを禁止

### フォーマット規約
- **インデント**: スペース2個（タブ禁止）
- **行幅**: 100文字
- **引用符**: シングルクォート使用
- **セミコロン**: 必須

## インポートパターン

### 標準ライブラリ
```typescript
import { join, dirname } from '@std/path';
import { ensureDir, exists } from '@std/fs';
import { parse as parseToml, stringify as stringifyToml } from '@std/toml';
```

### 外部ライブラリ
```typescript
import { Command } from '@cliffy/command';
import OpenAI from 'openai';
```

### 内部インポート
```typescript
import type { Tool, ToolParameters, ToolResult } from '../../interfaces/tool.ts';
import { BaseTool } from './base_tool.ts';
```

## 型定義パターン

### インターフェース定義
```typescript
export interface ToolResult {
  success: boolean;
  data?: unknown;
  error?: string;
  output?: string;
}
```

### 型安全なパラメータ取得
```typescript
protected getParameter<T>(parameters: ToolParameters, key: string, defaultValue?: T): T {
  const value = parameters[key];
  if (value === undefined || value === null) {
    if (defaultValue !== undefined) {
      return defaultValue;
    }
    throw new Error(`必須パラメータ '${key}' が指定されていません`);
  }
  return value as T;
}
```

## エラーハンドリング

### 統一されたエラー処理
```typescript
try {
  // 処理
  return this.success(data, output);
} catch (error) {
  return this.error(
    `エラーメッセージ: ${error instanceof Error ? error.message : String(error)}`
  );
}
```

### async/await使用
- Promiseベースの処理は必ずasync/awaitを使用
- .then()/.catch()チェーンは使用しない

## ファイル命名規約

- **ファイル名**: snake_case（例：`tool_executor.ts`）
- **クラス名**: PascalCase（例：`ToolExecutor`）
- **インターフェース名**: PascalCase（例：`ToolResult`）
- **変数・関数名**: camelCase（例：`configManager`）

## JSDoc記述

```typescript
/**
 * ツール実行管理クラス
 */
export class ToolExecutor {
  /**
   * ツールを実行
   * @param toolCall ツール呼び出しリクエスト
   * @param context 実行コンテキスト
   * @returns 実行結果
   */
  async executeTool(toolCall: ToolCallRequest, context: ToolExecutionContext): Promise<ToolResult> {
    // 実装
  }
}
```

## ログ出力

### console.logの使用パターン
```typescript
console.log('✅ 成功メッセージ');
console.warn('⚠️  警告メッセージ');
console.error('❌ エラーメッセージ');
console.log('🔧 処理中メッセージ');
```

絵文字を使用して視覚的に分かりやすくする。
description:
globs:
alwaysApply: false
---

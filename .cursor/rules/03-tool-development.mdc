# ツール開発ガイドライン

Minocのツールシステムは、[BaseTool](mdc:core/tools/base_tool.ts)抽象クラスを継承して実装します。

## ツールクラスの基本構造

### 必須実装項目

```typescript
export class YourTool extends BaseTool {
  override readonly name = 'your_tool_name';
  override readonly description = 'ツールの説明';
  override readonly requiredParameters = ['param1', 'param2'];
  override readonly optionalParameters = ['optionalParam'];
  override readonly dangerous = false; // true if dangerous
  override readonly requiresApproval = false; // true if needs approval

  override async execute(
    parameters: ToolParameters, 
    context?: ToolExecutionContext
  ): Promise<ToolResult> {
    // 実装
  }
}
```

## セキュリティ分類

### 危険なツール（dangerous: true）
- ファイル書き込み・削除
- コマンド実行
- システム設定変更

### 承認が必要なツール（requiresApproval: true）
- 外部ネットワーク通信
- システムリソースの変更
- 機密性の高い操作

## パラメータ処理パターン

### 必須パラメータの取得
```typescript
const command = this.getParameter<string>(parameters, 'command');
const path = this.getParameter<string>(parameters, 'path');
```

### オプションパラメータの取得
```typescript
const timeout = this.getOptionalParameter<number>(parameters, 'timeout', 30000);
const overwrite = this.getOptionalParameter<boolean>(parameters, 'overwrite', true);
```

### コンテキスト情報の活用
```typescript
const workingDirectory = context?.workingDirectory || Deno.cwd();
const environment = context?.environment;
const sessionId = context?.sessionId;
```

## 戻り値パターン

### 成功時
```typescript
return this.success(
  { path, size: stat.size }, // data
  `ファイル '${path}' に書き込みました (${stat.size} bytes)` // output message
);
```

### エラー時
```typescript
return this.error(
  `ファイル書き込みエラー: ${error instanceof Error ? error.message : String(error)}`
);
```

## エラーハンドリング

### 統一されたエラー処理
```typescript
override async execute(parameters: ToolParameters, context?: ToolExecutionContext): Promise<ToolResult> {
  try {
    // メイン処理
    return this.success(result);
  } catch (error) {
    return this.error(`操作エラー: ${error instanceof Error ? error.message : String(error)}`);
  }
}
```

## 既存ツールの参考例

### ファイル操作系
- [ReadFileTool](mdc:core/tools/file_tools.ts) - ファイル読み込み（安全）
- [WriteToFileTool](mdc:core/tools/file_tools.ts) - ファイル書き込み（危険・要承認）
- [CreateDirectoryTool](mdc:core/tools/file_tools.ts) - ディレクトリ作成（危険・要承認）

### コマンド実行系
- [ExecuteCommandTool](mdc:core/tools/command_tool.ts) - シェルコマンド実行（危険・要承認）

## ツール実行フロー

1. **パラメータ検証** - `validateParameters()`で基本検証
2. **権限チェック** - PermissionManagerで権限確認
3. **承認プロセス** - 必要に応じてユーザー承認
4. **実行** - `execute()`メソッド呼び出し
5. **履歴記録** - HistoryRecorderで実行履歴を保存

## 新規ツール追加時の注意点

### ツール登録
[ToolExecutor](mdc:core/tools/tool_executor.ts)の`initializeTools()`メソッドにツールを追加：

```typescript
private initializeTools() {
  this.tools.set('your_tool_name', new YourTool());
}
```

### セキュリティ考慮事項
- 外部入力の検証を徹底
- ファイルパスのサニタイゼーション
- コマンドインジェクションの防止
- 適切な権限レベルの設定

### テストの実装
- 正常系・異常系の両方をテスト
- セキュリティ関連の境界値テスト
- モックを使用した単体テスト
description:
globs:
alwaysApply: false
---
